<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jvm on NereusYi</title><link>https://g.nereusyi.com/categories/jvm/</link><description>Recent content in jvm on NereusYi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 May 2021 18:38:32 +0800</lastBuildDate><atom:link href="https://g.nereusyi.com/categories/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>jvm的jit参数设置</title><link>https://g.nereusyi.com/post/2021/05/jvm-jit-compilation-flag/</link><pubDate>Wed, 05 May 2021 18:38:32 +0800</pubDate><guid>https://g.nereusyi.com/post/2021/05/jvm-jit-compilation-flag/</guid><description>简介 在工作中，经常会见到在启动Java程序的命令行里加一大把启动参数，有些是过时的，有些是不适合每个程序的。本文就简单说说经常见到的-server参数。
-server参数的作用 在早期jvm中，-server参数表示Java程序使用Server VM运行。设置server参数可以让jit尽最大努力，用较多的启动时间，把较多的代码预先编译成native代码，增加运行效率。
但在现代JVM（如 Java 8）中，该参数并没有什么作用，因为现代JVM都是Server VM（详细见参考资料1）。
控制JIT编译的参数 现代JVM的JIT默认开启了分层编译，共分为5级：
level 0 - interpreter level 1 - C1 with full optimization (no profiling) level 2 - C1 with invocation and backedge counters level 3 - C1 with full profiling (level 2 + MDO) level 4 - C2 所以如果想要JIT尽可能的优化，可以设置JIT使用C2编译，如：
-XX:TieredStopAtLevel=4
另外，JIT对执行超过一定次数的代码，会编译成native代码，控制该次数的参数是：-XX:CompileThreshold=10000。编译的native代码也会有大小限制，控制该大小的参数是：-XX:ReservedCodeCacheSize=240m
参考资料 [1]Oracle文档：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
[2]JVM源码：http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2b2511bd3cc8/src/share/vm/runtime/advancedThresholdPolicy.hpp#l34</description></item><item><title>Java微型网络程序GC调优练习</title><link>https://g.nereusyi.com/post/2020/02/gc-tuning-practice/</link><pubDate>Mon, 10 Feb 2020 20:15:06 +0800</pubDate><guid>https://g.nereusyi.com/post/2020/02/gc-tuning-practice/</guid><description>简介 最近用java写了一个微型的网络程序，没进行GC调优的情况下就已经满足性能要求。不过想通过对这个程序调优，再熟悉一下GC调优流程。
通过活跃数据大小设置堆内存大小 活跃数据大小指的是应用程序员运行于稳定态时，长期存活的对象在Java堆中占用的空间大小。所以可以在程序稳定运行时，进行多次Full GC，之后再查看Java堆的占用情况来测量活跃数据大小。
调优过程需要一步一步多次确定更合适的值，JVM的初始参数和版本信息如下（堆大小按感觉先随意分配256M，如果有溢出再调整）：
-Xms256m -Xmx256m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:MaxDirectMemorySize=512m -XX:+PrintCommandLineFlags -XX:+UseParallelGC java version &amp;quot;1.8.0_241&amp;quot; Java(TM) SE Runtime Environment (build 1.8.0_241-b07) Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode) 其中-XX:+PrintGCDetails 参数表示打印垃圾回收情况，-XX:+PrintGCTimeStamps参数表示每次打印的时候带上JVM启动到当前时间的秒数，也可以使用-XX:+PrintGCDateStamps打印日历时间。-XX:+UseParallelGC是java8在Windows64上的默认选择，表示同时启用多线程新生代和多线程老年代的Parallel垃圾收集器[1]，这一点可能跟旧版本的java不一样（对旧版本java的没太多研究）。
用这个程序来看平均速率在200KB/S左右的直播。运行一段时间之后，程序达到稳定状态。由于这个程序在256M内存下，不经常发生Full GC，所以在程序稳定运行的时候，用visualvm触发多次Full GC。每次Full GC的结果比较相似，选取其中一个显示如下（已调整换行）：
1887.144: [Full GC (System.gc()) [PSYoungGen: 224K-&amp;gt;0K(86528K)] [ParOldGen: 7438K-&amp;gt;6220K(175104K)] 7662K-&amp;gt;6220K(261632K), [Metaspace: 19356K-&amp;gt;19356K(1067008K)], 0.0254513 secs] [Times: user=0.11 sys=0.00, real=0.02 secs] 日志显示，Full GC之后的老年代占用6220K，所以活跃数据大约为6M。根据通用法则，堆的初始值和最大值一般设置为老年代活跃数据大小的3-4倍。这里按4倍计算，设置堆的初始值和最大值为24M：-Xms24m -Xmx24m。
而新生代的空间应该为老年代活跃数据的1-1.5倍。这里按1.5倍计算，设置新生代大小为9M：-Xmn9m。调整后使用的JVM参数设置如下：
-Xms24m -Xmx24m -Xmn9m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:MaxDirectMemorySize=512m -XX:+PrintCommandLineFlags -XX:+UseParallelOldGC 验证设置 经过设置之后，再次让程序运行到稳定的状态。其中Minor GC的频率比较稳定，摘取结果如下：</description></item><item><title>visualvm的profiler连接问题</title><link>https://g.nereusyi.com/post/2020/02/visualvm-profiler-startup-problem/</link><pubDate>Wed, 05 Feb 2020 21:28:09 +0800</pubDate><guid>https://g.nereusyi.com/post/2020/02/visualvm-profiler-startup-problem/</guid><description>在 Windows 10 上，用JDK8 自带的jvisualvm.exe连接java程序，出现了几个问题。
问题1：选择profiler分析的时候，一直卡在“正在连接目标VM”： 解决：在命令行中用以下命令启动：
jvisualvm.exe -J-Dorg.netbeans.profiler.separateConsole=true 用这个方法启动过一次，第二次就可以直接双击启动，不用再从命令行启动了。
问题2：使用上面方法启动之后，再次选择profiler分析，出现Redefinition failed with error 62 解决：在被分析的程序启动时，加上JVM参数：-Xverify:none。
JDK内置的visualvm版本比较老，以上问题在我从官网上下载新的1.4.4版本的visualvm后都正常了。在JDK9之后，JDK也不再内置visualvm，所以还是单独下一个备着会比较好。
参考：
https://stackoverflow.com/questions/37632783/visualvm-cpu-memory-profiler-stuck-at-connecting-to-the-target-jvm
https://github.com/oracle/visualvm/issues/33
https://visualvm.github.io
https://blogs.oracle.com/java-platform-group/visual-vm-in-jdk-9-and-beyond</description></item></channel></rss>