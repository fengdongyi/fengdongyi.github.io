<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring boot on NereusYi</title><link>https://g.nereusyi.com/categories/spring-boot/</link><description>Recent content in spring boot on NereusYi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Mar 2021 23:36:37 +0800</lastBuildDate><atom:link href="https://g.nereusyi.com/categories/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot Bean Validation 示例</title><link>https://g.nereusyi.com/post/2021/03/spring-boot-bean-validation/</link><pubDate>Sun, 28 Mar 2021 23:36:37 +0800</pubDate><guid>https://g.nereusyi.com/post/2021/03/spring-boot-bean-validation/</guid><description>简介 在应用的各个环节，最好对输入的参数进行校验，以保持应用的健壮性。Java的Bean Validation API对此提供了较好的支持，下面展示在Spring Boot中使用Bean Validation的示例。
使用环境：Java 11 和 Spring Boot 2.4.3.RELEASE
集成Bean Validation 在Spring Boot中集成Bean Validation与集成其他的框架类似，在pom.xml里引入相关的starter就可以：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-validation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 这里用springmvc做示例。
在Spring Boot老版本中，validation包不用单独引入。在新版本中，validation被拆分，需要单独引入。引入的实现是hibernate validator。
对Controller的入参校验 通常来说，一个Controller有下面几种方式接收入参：
通过request body，如解析json请求 用url path作为参数，如order/{id} get请求的url形式的?key=value传参，和post的类似key value传参等 Java Bean参数 通过request body和get、post的传参都可以通过一个java bean接收。我们可以在java bean中的字段上，加上校验的注解[1]：
@Data @FieldDefaults(level = AccessLevel.PRIVATE) public class OrderDto { @NotNull String orderId; @NotNull @Min(value = 0,message = &amp;#34;price can&amp;#39;t less than 0&amp;#34;) @Max(value = 99999,message = &amp;#34;price can&amp;#39;t greater than 99999&amp;#34;) Integer price; @NotNull @PastOrPresent LocalDateTime startDate; @FutureOrPresent LocalDateTime closeDate; } 在Controller中：</description></item><item><title>Spring Boot Actuator 2 示例</title><link>https://g.nereusyi.com/post/2021/03/spring-boot-actuator-demo/</link><pubDate>Sat, 20 Mar 2021 13:51:35 +0800</pubDate><guid>https://g.nereusyi.com/post/2021/03/spring-boot-actuator-demo/</guid><description>简介 Spring Boot Actuator为应用程序提供了各种开箱即用的运维特性，可以与应用方便的交互和监控。
使用环境：Java 11 和 Spring Boot 2.4.3.RELEASE
集成Spring Boot Actuator 在Spring Boot中集成Spring Boot Actuator与集成其他的框架类似，在pom.xml里引入相关的starter就可以：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 由于大部分的使用场景还是web，所以这里也用Spring MVC做示例。
配置好pom.xml后，默认actuator仅暴露一些基本功能，实际使用中，根据需求暴露对应功能。为了简便测试，这里在application.yml中配置暴露全部功能：
management: endpoints: web: exposure: include: &amp;#34;*&amp;#34; endpoint: health: enabled: true show-details: always probes: enabled: true shutdown: enabled: true metrics: export: jmx: enabled: false server: shutdown: graceful 之后启动程序，在控制台应该能看到以下输出：
2021-03-08 23:05:08.555 INFO 32637 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 16 endpoint(s) beneath base path '/actuator' 常用内置功能 Actuator内置了许多功能接口，下面介绍一些个人常用的。</description></item><item><title>Spring Security整合进Spring Boot中的基础用法</title><link>https://g.nereusyi.com/post/2020/11/spring-security-basic-usage/</link><pubDate>Mon, 30 Nov 2020 23:45:15 +0800</pubDate><guid>https://g.nereusyi.com/post/2020/11/spring-security-basic-usage/</guid><description>简介 Spring Security为应用程序提供了方便的登陆和鉴权的 API ，默认启用各项安全配置，能够简化大量的应用程序安全需求开发。不过由于这些默认启用的各项安全配置，也会让第一次集成Spring Security的开发人员有一定的上手难度。
使用环境：Java 11 和 Spring Boot 2.3.5.RELEASE
集成Spring Security 在Spring Boot中集成Spring Security与集成其他的框架类似，在pom.xml里引入相关的starter就可以：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 由于大部分的使用场景还是web，所以这里也引进Spring MVC做示例。
现在建立一个Controller作为简单的示例：
@RestController(&amp;#34;foods&amp;#34;) public class FoodController { private List&amp;lt;String&amp;gt; foods = List.of(&amp;#34;Bread&amp;#34;,&amp;#34;Sandwich&amp;#34;); @GetMapping public List&amp;lt;String&amp;gt; getFood(){ return foods; } @PostMapping public void addFood(String food){ foods.add(food); } @DeleteMapping public void deleteFood(String food){ boolean removed = foods.remove(food); if (!removed) { throw new IllegalArgumentException(&amp;#34;no such food : &amp;#34; + food); } } } 这时启动项目，会看到在控制台会有类似输出：</description></item><item><title>Spring Boot 2 启动流程解析</title><link>https://g.nereusyi.com/post/2019/how-spring-boot-2-started-up/</link><pubDate>Sun, 19 May 2019 16:28:09 +0800</pubDate><guid>https://g.nereusyi.com/post/2019/how-spring-boot-2-started-up/</guid><description>本文基于Spring Boot 2.1.4.RELEASE版本，希望通过&amp;quot;自顶向下&amp;quot;的方法来理解Spring Boot的启动流程。先从整体上了解流程走向，再查看对应源码。
启动类 Spring Boot的启动类通常如下：
@SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 首先看一下@SpringBootApplication注解，这个注解由3个注解组成 @SpringBootApplication=@EnableAutoConfiguration+@ComponentScan+@Configuration
注意： @SpringBootApplication实际上注册的是@SpringBootConfiguration，但@SpringBootConfiguration里面包含了@Configuration。
各个注解作用如下：
@EnableAutoConfiguration 开启自动配置 @ComponentScan SpringBean扫描 @Configuration 开启配置类 然后再看一下SpringApplication类，这个类主要通过如下步骤启动应用：
根据应用的classpath创建对应的ApplicationContext(独立应用、WEB应用或REACTIVE应用) 注册CommandLinePropertySource，把命令行参数转换为Spring Properties 刷新ApplicationContext，加载所有的单例SpringBean 调用实现了CommandLineRunner的SpringBean中的run方法 下面从源码上分别来看下这些步骤，这些步骤主要在SpringApplication类中的run方法中(public ConfigurableApplicationContext run(String... args) )
主要源码如下
代码清单1，创建SpringApplication实例
public SpringApplication(ResourceLoader resourceLoader, Class&amp;lt;?&amp;gt;... primarySources) { this.resourceLoader = resourceLoader; Assert.notNull(primarySources, &amp;#34;PrimarySources must not be null&amp;#34;); this.primarySources = new LinkedHashSet&amp;lt;&amp;gt;(Arrays.</description></item></channel></rss>