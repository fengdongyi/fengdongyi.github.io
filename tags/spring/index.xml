<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Nereus</title>
    <link>/tags/spring/</link>
    <description>Recent content in spring on Nereus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 May 2019 16:28:09 +0800</lastBuildDate>
    
	<atom:link href="/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot 2 启动流程解析</title>
      <link>/post/2019/how-spring-boot-2-started-up/</link>
      <pubDate>Sun, 19 May 2019 16:28:09 +0800</pubDate>
      
      <guid>/post/2019/how-spring-boot-2-started-up/</guid>
      <description>本文基于Spring Boot 2.1.4.RELEASE版本，希望通过&amp;rdquo;自顶向下&amp;rdquo;的方法来理解Spring Boot的启动流程。先从整体上了解流程走向，再查看对应源码。
启动类 Spring Boot的启动类通常如下：
@SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } }  首先看一下@SpringBootApplication注解，这个注解由3个注解组成 @SpringBootApplication=@EnableAutoConfiguration+@ComponentScan+@Configuration
 注意： @SpringBootApplication实际上注册的是@SpringBootConfiguration，但@SpringBootConfiguration里面包含了@Configuration。
 各个注解作用如下：
 @EnableAutoConfiguration 开启自动配置 @ComponentScan SpringBean扫描 @Configuration 开启配置类  然后再看一下SpringApplication类，这个类主要通过如下步骤启动应用： - 根据应用的classpath创建对应的ApplicationContext(独立应用、WEB应用或REACTIVE应用) - 注册CommandLinePropertySource，把命令行参数转换为Spring Properties - 刷新ApplicationContext，加载所有的单例SpringBean - 调用实现了CommandLineRunner的SpringBean中的run方法
下面从源码上分别来看下这些步骤，这些步骤主要在SpringApplication类中的run方法中(public ConfigurableApplicationContext run(String... args))
主要源码如下
代码清单1，创建SpringApplication实例
public SpringApplication(ResourceLoader resourceLoader, Class&amp;lt;?&amp;gt;... primarySources) { this.resourceLoader = resourceLoader; Assert.notNull(primarySources, &amp;quot;PrimarySources must not be null&amp;quot;); this.</description>
    </item>
    
  </channel>
</rss>