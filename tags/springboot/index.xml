<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>springboot on NereusYi</title><link>https://g.nereusyi.com/tags/springboot/</link><description>Recent content in springboot on NereusYi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 May 2021 22:58:12 +0800</lastBuildDate><atom:link href="https://g.nereusyi.com/tags/springboot/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring的Transaction事务管理</title><link>https://g.nereusyi.com/post/2021/05/spring-boot-transaction/</link><pubDate>Mon, 31 May 2021 22:58:12 +0800</pubDate><guid>https://g.nereusyi.com/post/2021/05/spring-boot-transaction/</guid><description>简介 本文的介绍主要从JDBC事务API的使用，到常用的SpringBoot中的事务管理，而SpringBoot其实是简化了很多Spring事务管理的配置。
JDBC的事务管理 基本的开启、提交和回滚事务 先复习一下JDBC的事务管理：
public void jdbcSaveOrder() throws SQLException { // 1. 拿到JDBC连接 Connection connection = dataSource.getConnection(); try (connection) { // 2. 设置自己控制事务 connection.setAutoCommit(false); .... // 3. 提交事务 connection.commit(); }catch (Exception e){ log.error(&amp;#34;ds save order error:&amp;#34;, e); // 4. 回滚事务 connection.rollback(); } } JDBC控制事务的API总体比较直观。
Spring的事务管理 可以从上面的JDBC示例中看到，事务管理最主要的几个操作就是：开启事务、提交事务、回滚事务。那么Spring是如何管理的呢？首先可以从不太常见的Spring编程式事务管理入手。
Spring编程式事务管理 我们可以通过PlatformTransactionManager来编程式开启事务，不过Spring提供了一个更加简便的TransactionTemplate：
@Service public class OrderService { @Autowired private TransactionTemplate transactionTemplate; public void programmaticTransactionSaveTwoOrder(){ transactionTemplate.executeWithoutResult( status -&amp;gt; { var o = newOrder(); orderRepository.</description></item></channel></rss>